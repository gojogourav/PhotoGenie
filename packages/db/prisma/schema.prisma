generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credit {
  id        String   @id
  userId    String   @unique
  amount    Int      @default(0)
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

model Generation {
  id           String           @id @default(uuid())
  userId       String
  photoId      String
  packId       String
  outputUrl    String
  errorMessage String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  status       GenerationStatus @default(pending)
  Pack         Pack             @relation(fields: [packId], references: [id])
  Photo        Photo            @relation(fields: [photoId], references: [id])
  User         User             @relation(fields: [userId], references: [id])
}

model Model {
  id         String          @id @default(uuid())
  type       modelTypeEnum
  age        Int
  ethenicity modelEthenicity @default(southAsian)
  eyeColor   EyeColor        @default(black)
  isBald     Boolean         @default(false)
  name       String
  Photo      Photo[]
  packId     String
  pack       Pack            @relation(fields: [packId], references: [id])
}

model Pack {
  id             String       @id @default(uuid())
  name           String       @unique
  description    String?
  previewUrl     String?
  prompt         String
  isPremium      Boolean      @default(false)
  priceInCredits Int          @default(0)
  createdAt      DateTime     @default(now())
  Generation     Generation[]
  model          Model[]
}

model Photo {
  id         String       @id @default(uuid())
  userId     String
  orignalUrl String
  fileName   String
  mimeType   String
  size       Int
  uploadedAt DateTime     @default(now())
  modelId    String
  Generation Generation[]
  Model      Model        @relation(fields: [modelId], references: [id])
  User       User         @relation(fields: [userId], references: [id])
}

model User {
  id         String       @id @default(uuid())
  clerkId    String       @unique
  email      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  profilePic String?
  Credit     Credit?
  Generation Generation[]
  Photo      Photo[]
}

enum EyeColor {
  blue
  black
  white
  brown
}

enum GenerationStatus {
  pending
  success
  failed
}

enum modelEthenicity {
  white
  black
  asian
  southAsian
  eastAsian
  hispanic
}

enum modelTypeEnum {
  Man
  Women
}
